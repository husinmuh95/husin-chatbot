import streamlit as st
import os
import io
import matplotlib.pyplot as plt
import pandas as pd

from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.prebuilt import create_react_agent
from langchain_core.messages import HumanMessage, AIMessage, ToolMessage
from langchain_core.tools import tool

from database_tools import text_to_sql, init_database, get_database_info, DB_FILE

if "messages" not in st.session_state:
    st.session_state.messages = []
if "last_sql_result_df" not in st.session_state:
    st.session_state.last_sql_result_df = pd.DataFrame()

# TITLE
st.title("Chatbot created by Husin")
st.caption("A chatbot that can answer questions about sales data using SQL that is generated by Faker")

# SIDEBAR
with st.sidebar:
    st.subheader("Settings")
    google_api_key = st.text_input("Google AI API Key", type="password")
    chart_type = st.selectbox("Select Chart Type", ["Bar Chart", "Line Chart", "Area Chart"])
    reset_button = st.button("Reset Conversation", help="Clear all messages and start fresh")
    init_db_button = st.button("Initialize Database", help="Create and populate the database with sample data")
    
    if init_db_button:
        with st.spinner("Initializing database..."):
            result = init_database()
            st.success(result)
        st.session_state.messages = []
        st.session_state.last_sql_result_df = pd.DataFrame()
        st.rerun()

# API KEY & AGENT
if not google_api_key:
    st.info("Please add your Google AI API key in the sidebar to start chatting.", icon="üóùÔ∏è")
    st.stop()

# LANGCHAIN
@tool
def execute_sql(sql_query: str):
    """
    Execute a SQL query against the sales database.
    
    Args:
        sql_query: The SQL query to execute.
    """
    result = text_to_sql(sql_query, st.session_state)
    return result

@tool
def get_schema_info():
    """
    Get information about the database schema and sample data.
    This tool returns the schema of all tables and sample data from each table.
    Use this tool before writing SQL queries to understand the database structure.
    """
    return get_database_info()

if ("agent" not in st.session_state) or (getattr(st.session_state, "_last_key", None) != google_api_key):
    try:
        llm = ChatGoogleGenerativeAI(
            model="gemini-2.5-flash",
            google_api_key=google_api_key,
            temperature=0.2
        )
        st.session_state.agent = create_react_agent(
            model=llm,
            tools=[get_schema_info, execute_sql],
            prompt="""You are a professional SQL data analyst and an expert in data visualization.
                Your main task is to answer user questions about a sales database by writing and executing SQL queries.

                Database Schema Overview:
                - customers: customer details (customer_id, first_name, city, registration_date)
                - products: product details (product_id, product_name, category, price)
                - employees: employee details (employee_id, first_name, department)
                - sales: sales records (sale_id, customer_id, employee_id, sale_date, total_amount)
                - order_details: links sales and products (order_detail_id, sale_id, product_id, quantity)

                Your Core Process:
                1. **Plan**: Formulate a SQL query based on the user's request.
                - Use `get_schema_info` ONLY if you need to double-check a table name or column.
                - For questions linking sales and products, you **must** join `sales` with `order_details` and then `order_details` with `products`.
                - For questions about employees or customers, use the appropriate JOINs.
                2. **Write**: Construct a valid SQLite SQL query.
                - Use aggregation functions (SUM, COUNT, AVG) when calculating totals.
                - Use aliases (e.g., `customers AS c`) for clarity in complex joins.
                3. **Execute**: Use the `execute_sql` tool to run the query.

                Special Instructions for Graphs:
                When the user asks for a chart or graph, **you MUST start your final answer with the keyword `[CHART]`**.
                - Your query for a chart MUST select at least two columns: one for the X-axis (e.g., name, date, category) and one for the Y-axis (a numerical value like total sales, quantity, or count).

                Error Handling:
                If a query fails, analyze the error and try to fix it. Do not give up on the first try.

                Final Answer:
                After executing the query, provide a clear, concise, and professional summary of the results. If a chart was requested, your explanation must follow the `[CHART]` keyword.
                """
        )
        st.session_state._last_key = google_api_key
        st.session_state.messages = []
        st.session_state.last_sql_result_df = pd.DataFrame()
    except Exception as e:
        st.error(f"Invalid API Key or configuration error: {e}")
        st.stop()

# CREATE GRAPH IMAGE
def create_graph_image(df: pd.DataFrame, chart_type: str):
    fig, ax = plt.subplots(figsize=(8, 4))
    
    if df.empty or len(df.columns) < 2:
        st.error("DataFrame kosong atau tidak memiliki cukup kolom untuk membuat grafik.")
        return None
        
    try:
        x = df.columns[0]
        y = df.columns[1]
        if not pd.api.types.is_numeric_dtype(df[y]):
            st.error(f"Kolom '{y}' bukan numerik. Tidak dapat membuat grafik.")
            return None

        if chart_type == "Bar Chart":
            ax.bar(df[x], df[y])
            ax.set_title(f"Bar Chart of {x} vs {y}")
            ax.set_xlabel(x)
            ax.set_ylabel(y)
        
        elif chart_type == "Line Chart":
            ax.plot(df[x], df[y], marker='o')
            ax.set_title(f"Line Chart of {x} vs {y}")
            ax.set_xlabel(x)
            ax.set_ylabel(y)

        elif chart_type == "Area Chart":
            ax.fill_between(df[x], df[y], alpha=0.5)
            ax.set_title(f"Area Chart of {x} vs {y}")
            ax.set_xlabel(x)
            ax.set_ylabel(y)
                
        plt.tight_layout()
        buf = io.BytesIO()
        plt.savefig(buf, format="png")
        plt.close(fig)
        buf.seek(0)
        return buf
    except Exception as e:
        st.error(f"Gagal membuat grafik: {e}")
        return None

# DISPLAY PAST CHAT
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
        if "chart_data" in msg and msg["chart_data"]:
            st.image(msg["chart_data"], caption=f"Generated {msg['chart_type']}")

# HANDLE USER INPUT
if prompt := st.chat_input("Ask a question about the sales data..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    try:
        messages_for_agent = [
            HumanMessage(content=msg["content"]) if msg["role"] == "user" else AIMessage(content=msg["content"])
            for msg in st.session_state.messages
        ]
        
        if not os.path.exists(DB_FILE):
             st.warning("Database not found. Please click 'Initialize Database' in the sidebar.")
             st.stop()

        with st.spinner("Thinking..."):
            response = st.session_state.agent.invoke({"messages": messages_for_agent})
            final_answer = response["messages"][-1].content
            
            is_chart_request = final_answer.strip().startswith("[CHART]")
            chart_data_buffer = None
            
            if is_chart_request and not st.session_state.last_sql_result_df.empty:
                df = st.session_state.last_sql_result_df
                final_answer = final_answer.replace("[CHART]", "").strip()
                chart_data_buffer = create_graph_image(df, chart_type)

            with st.chat_message("assistant"):
                if chart_data_buffer:
                    st.image(chart_data_buffer, caption=f"Generated {chart_type}")
                
                st.markdown(final_answer)
                
    except Exception as e:
        final_answer = f"An error occurred: {e}"
        st.error(final_answer)
    
    response_entry = {"role": "assistant", "content": final_answer}
    if chart_data_buffer:
        response_entry["chart_data"] = chart_data_buffer
        response_entry["chart_type"] = chart_type
    
    st.session_state.messages.append(response_entry)